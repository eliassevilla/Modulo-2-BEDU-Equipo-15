nlista[[2]] <- mutate(nlista[[2]], Date = as.Date(Date, "%d/%m/%Y"))
nlista[[3]] <- mutate(nlista[[3]], Date = as.Date(Date, "%d/%m/%Y"))
#Verificamos que nuestros cambios se hayan llevado a cabo
lapply(nlista, str)
#Finalmente, con ayuda de las funciones rbind y do.call combinamos los data frames contenidos en nlista como un Ãºnico data frame
data <- do.call(rbind, nlista)
dim(data)
str(data)
tail(data)
View(data)
summary(data)
#Con ayuda de la funciÃ³n table obtenemos las estimaciones de probabilidades solicitadas
(pcasa <- round(table(data$FTHG)/dim(data)[1], 3)) # Probabilidades marginales estimadas para los equipos que juegan en casa
#Con ayuda de la funciÃ³n table obtenemos las estimaciones de probabilidades solicitadas
(pcasa <- round(table(data$FTHG)/dim(data)[1], 3)) # Probabilidades marginales estimadas para los equipos que juegan en casa
(pvisita <- round(table(data$FTAG)/dim(data)[1], 3)) # Probabilidades marginales estimadas para los equipos que juegan como visitante
(pcta <- round(table(data$FTHG, data$FTAG)/dim(data)[1], 3)) # Probabilidades conjuntas estimadas para los partidos
pcasa <- as.data.frame(pcasa)
str(pcasa)
pcasa <- pcasa %>% rename(goles = Var1, FRel = Freq)
tail(pcasa)
p <- ggplot(pcasa, aes(x = goles, y = FRel)) +
geom_bar (stat="identity", fill = 'blue') +
ggtitle('Equipo de casa')
p
pvisita <- as.data.frame(pvisita)
pvisita <- rename(pvisita, goles = Var1, FRel = Freq)
tail(pvisita)
p <- ggplot(pvisita, aes(x = goles, y = FRel)) +
geom_bar (stat="identity", fill = 'red') +
ggtitle('Equipo visitante')
p
pcta <- melt(pcta) # FunciÃ³n del paquete reshape2
pcta <- rename(pcta, gcasa = Var1, gvisita = Var2, ProbEst = value)
pcta %>% ggplot(aes(gcasa, gvisita)) +
geom_tile(aes(fill = ProbEst)) +
ggtitle('Probabilidades conjuntas estimadas') +
scale_fill_gradient(low = 'white', high = 'purple') +
theme(axis.text.x = element_text(angle = 90, hjust = 0))
soccer.data <- read.csv("C:/Users/dapar/OneDrive/Documents/SP1.csv")
dim(soccer.data)
class(soccer.data)
tail(soccer.data); str(soccer.data)
(x <- soccer.data$FTHG)
(y <- soccer.data$FTAG)
?table
(tablex <- table(x))
(prop.table(tablex))
#Con ayuda de la funciÃ³n table obtenemos las estimaciones de probabilidades solicitadas
(pcasa <- round(table(data$FTHG)/dim(data)[1], 3)) # Probabilidades marginales estimadas para los equipos que juegan en casa
#Con las funciones lapply y str observaremos la estrucura de nuestros nuevos data frames
lapply(nlista, str)
library(dplyr)
library(reshape2)
library(ggplot2)
url1718 <- "https://www.football-data.co.uk/mmz4281/1718/SP1.csv"
url1819 <- "https://www.football-data.co.uk/mmz4281/1819/SP1.csv"
url1920 <- "https://www.football-data.co.uk/mmz4281/1920/SP1.csv"
data1718 <- read.csv(file = url1718)
data1819 <- read.csv(file = url1819)
data1920 <- read.csv(file = url1920)
View(data1718)
View(data1819)
View(data1920)
url1718 <- "https://www.football-data.co.uk/mmz4281/1718/SP1.csv"
url1819 <- "https://www.football-data.co.uk/mmz4281/1819/SP1.csv"
url1920 <- "https://www.football-data.co.uk/mmz4281/1920/SP1.csv"
data1718 <- read.csv(file = url1718)
data1819 <- read.csv(file = url1819)
data1718 <- read.csv("https://www.football-data.co.uk/mmz4281/1718/SP1.csv")
netflix.movies <- read.csv("https://raw.githubusercontent.com/ecoronadoj/Sesion_1/main/Data/netflix_titles.csv")
data1718 <- read.csv("https://www.football-data.co.uk/mmz4281/1718/SP1.csv")
data1819 <- read.csv("https://www.football-data.co.uk/mmz4281/1819/SP1.csv")
data1920 <- read.csv("https://www.football-data.co.uk/mmz4281/1920/SP1.csv")
View(data1718)
lista <- list(data1718, data1819, data1920)
lista <- lapply(lista, select, Date:FTR)
head(lista[[1]]); head(lista[[2]]); head(lista[[3]]);
lista[[1]] <- mutate(lista[[1]], Date = as.Date(Date, "%d/%m/%y"))
lista[[2]] <- mutate(lista[[2]], Date = as.Date(Date, "%d/%m/%Y"))
lista[[3]] <- mutate(lista[[3]], Date = as.Date(Date, "%d/%m/%Y"))
head(lista[[1]]); head(lista[[2]]); head(lista[[3]]);
lista <- list(data1718, data1819, data1920)
lista <- lapply(lista, select, Date, HomeTeam, AwayTeam, FTHG, FTAG, FTR)
head(lista[[1]]); head(lista[[2]]); head(lista[[3]]);
lista[[1]] <- mutate(lista[[1]], Date = as.Date(Date, "%d/%m/%y"))
lista[[2]] <- mutate(lista[[2]], Date = as.Date(Date, "%d/%m/%Y"))
lista[[3]] <- mutate(lista[[3]], Date = as.Date(Date, "%d/%m/%Y"))
head(lista[[1]]); head(lista[[2]]); head(lista[[3]]);
data <- do.call(rbind, lista)
dim(data)
str(data)
tail(data)
head(data)
View(data)
(x <- data$FTHG)
(y <- data$FTAG)
(tablex <- table(x))
(prop.table(tablex))
#Con ayuda de la funciÃ³n table obtenemos las estimaciones de probabilidades solicitadas
(pcasa <- round(table(data$FTHG)/dim(data)[1], 3)) # Probabilidades marginales estimadas para los equipos que juegan en casa
(tablex <- table(x))
(prop.table(tablex))
(tabley <- table(y))
(prop.table(tabley))
(pvisita <- round(table(data$FTAG)/dim(data)[1], 3)) # Probabilidades marginales estimadas para los equipos que juegan como visitante
(tablexy <- table(x,y))
(prop.table(tablexy))
(pcta <- round(table(data$FTHG, data$FTAG)/dim(data)[1], 3)) # Probabilidades conjuntas estimadas para los partidos
#Con ayuda de la funciÃ³n table obtenemos las estimaciones de probabilidades solicitadas
(pcasa <- round(table(data$FTHG)/dim(data)[1], 3)) # Probabilidades marginales estimadas para los equipos que juegan en casa
pcasa <- as.data.frame(pcasa)
str(pcasa)
tablex <- as.data.frame(tabalex)
tablex <- as.data.frame(tablex)
str(tablex)
str(pcasa)
tablex <- as.data.frame(tablex)
str(tablex)
pcasa <- pcasa %>% rename(goles = Var1, FRel = Freq)
tail(pcasa)
p <- ggplot(pcasa, aes(x = goles, y = FRel)) +
geom_bar (stat="identity", fill = 'blue') +
ggtitle('Equipo de casa')
p
(tablex <- table(x))
(prop.table(tablex))
str(tablex)
tablex <- as.data.frame(tablex)
str(tablex)
tablex <- as.data.frame(tablex)
str(tablex)
p <- ggplot(tablex, aes(x = x, y = Freq)) +
geom_bar (stat="identity", fill = 'blue') +
ggtitle('Equipo de casa')
p
plotx <- ggplot(tablex, aes(x = x, y = Freq)) +
geom_bar (stat="identity", fill = 'blue') +
ggtitle('Equipo de casa')
plotx
(tabley <- table(y))
(prop.table(tabley))
str(tabley)
tabley <- as.data.frame(tabley)
str(tabley)
plotx
ploty
ploty <- ggplot(tabley, aes(x = y, y = Freq)) +
geom_bar (stat="identity", fill = 'red') +
ggtitle('Equipo de visita')
ploty
plotx
head(tablex)
(tablex <- table(x))
(tablex <- table(x))
(tablex <- prop.table(tablex))
str(tablex)
tablex <- as.data.frame(tablex)
head(tablex)
str(tablex)
plotx <- ggplot(tablex, aes(x = x, y = Freq)) +
geom_bar (stat="identity", fill = 'green') +
ggtitle('Equipo de casa')
plotx
plotx <- ggplot(tablex, aes(x = x, y = Freq)) +
geom_bar (stat="identity", fill = 'red') +
ggtitle('Equipo de casa')
plotx
(tabley <- table(y))
(tabley <- prop.table(tabley))
str(tabley)
tabley <- as.data.frame(tabley)
str(tabley)
ploty <- ggplot(tabley, aes(x = y, y = Freq)) +
geom_bar (stat="identity", fill = 'blue') +
ggtitle('Equipo de visita')
ploty
(tablexy <- table(x,y))
(tablexy <- prop.table(tablexy))
str(tablexy)
tablexy <- melt(tablexy) # FunciÃ³n del paquete reshape2
str(tablexy)
tablexy <- melt(tablexy)
str(tablexy)
(tablexy <- table(x,y))
(tablexy <- prop.table(tablexy))
str(tablexy)
tablexy <- melt(tablexy)
str(tablexy)
tablexy %>% ggplot(aes(x, y)) +
geom_tile(aes(fill = value)) +
ggtitle('Probabilidades Conjuntas') +
scale_fill_gradient(low = 'white', high = 'purple') +
theme(axis.text.x = element_text(angle = 90, hjust = 0))
tablexy %>% ggplot(aes(x, y)) +
geom_tile(aes(fill = value)) +
ggtitle('Probabilidades Conjuntas') +
scale_fill_gradient(low = 'blue', high = 'red') +
theme(axis.text.x = element_text(angle = 90, hjust = 0))
library(ggplot2)
library(reshape2)
install.packages("reshape2")
install.packages("reshape2")
dbinom(x = 20, size = 30, prob = 0.2)
pbinom(q = 20, size = 30, prob = 0.2)
qbinom(p = 0.35, size = 30, prob = 0.2) # b = 5
set.seed(4857) # Establecemos una semilla, para poder reproducir la muestra en el futuro
muestra <- rbinom(n = 1000, size = 30, prob = 0.2)
length(muestra); muestra[1:3]
as.data.frame(table(muestra))
(df1 <- as.data.frame(table(muestra)/length(muestra)))
as.data.frame(table(muestra))
(df1 <- as.data.frame(table(muestra)/length(muestra)))
valg <- as.character(df1$muestra) # distintos valores generados por rbinom
(valg <- as.numeric(valg)) # Convertimos a nÃºmeros
(v1 <- round(sapply(valg, dbinom, size = 30, p = 0.2), 3))
(df2 <- cbind(df1, v1))
(names(df2) <- c("Exitos", "FR", "Prob"))
(df2 <- melt(df2)) # funciÃ³n del paquete reshape2
ggplot(df2, aes(x = Exitos, y = value, fill = variable)) +
geom_bar (stat="identity", position = "dodge") # Funciones del paquete ggplot2
x <- seq(-4, 4, 0.01)*6 + 175 # Algunos posibles valores que puede tomar la v.a. X (mÃ­nimo: mu-4sigma, mÃ¡ximo: mu+4sigma)
y <- dnorm(x, mean = 175, sd = 6) # Valores correspondientes de la funciÃ³n de densidad de probabilidad
plot(x, y, type = "l", xlab = "", ylab = "")
title(main = "Densidad de Probabilidad Normal", sub = expression(paste(mu == 175, " y ", sigma == 6)))
abline(v = 175, lwd = 2, lty = 2) # La media es 175
pnorm(q = 180, mean = 175, sd = 6)
par(mfrow = c(2, 2))
plot(x, y, type = "l", xlab = "", ylab = "")
title(main = "Densidad de Probabilidad Normal", sub = expression(paste(mu == 175, " y ", sigma == 6)))
polygon(c(min(x), x[x<=180], 180), c(0, y[x<=180], 0), col="red")
pnorm(q = 165, mean = 175, sd = 6)
plot(x, y, type = "l", xlab = "", ylab = "")
title(main = "Densidad de Probabilidad Normal", sub = expression(paste(mu == 175, " y ", sigma == 6)))
polygon(c(min(x), x[x<=165], 165), c(0, y[x<=165], 0), col="yellow")
pnorm(q = 180, mean = 175, sd = 6) - pnorm(q = 165, mean = 175, sd = 6)
plot(x, y, type = "l", xlab="", ylab="")
title(main = "Densidad de Probabilidad Normal", sub = expression(paste(mu == 175, " y ", sigma == 6)))
polygon(c(165, x[x>=165 & x<=180], 180), c(0, y[x>=165 & x<=180], 0), col="green")
pnorm(q = 182, mean = 175, sd = 6, lower.tail = FALSE)
plot(x, y, type = "l", xlab="", ylab="")
title(main = "Densidad de Probabilidad Normal", sub = expression(paste(mu == 175, " y ", sigma == 6)))
polygon(c(182, x[x>=182], max(x)), c(0, y[x>=182], 0), col="blue")
dev.off() # Para mostrar solo una grÃ¡fica
(b <- qnorm(p = 0.75, mean = 175, sd = 6))
pnorm(b, 175, 6)
x <- seq(-4, 4, 0.01) # Algunos valores que puede tomar la v.a. T con 7 gl
y <- dt(x, df = 7) # Valores correspondientes de la densidad t de Student con 7 gl
plot(x, y, type = "l", main = "Densidad t de Student, gl = 7", xlab="", ylab="")
abline(v = 0, lwd=2, lty=2)
qbinom(p = 0.5, size = 35, prob = 0.51)
set.seed(4857)
muestra <- rbinom(n = 1000, size = 35, prob = 0.51)
as.data.frame(table(muestra))
(df1 <- as.data.frame(table(muestra)/length(muestra)))
valg <- as.character(df1$muestra)
(valg <- as.numeric(valg))
set.seed(4857)
muestra <- rbinom(n = 1000, size = 35, prob = 0.51)
as.data.frame(table(muestra))
(df1 <- as.data.frame(table(muestra)/length(muestra)))
valg <- as.character(df1$muestra)
(valg <- as.numeric(valg))
ggplot(df1, aes(x = Exitos, y = value, fill = variable)) +
geom_bar (stat="identity", position = "dodge")
(df1 <- as.data.frame(table(muestra)/length(muestra)))
(df2 <- melt(df2)) # funciÃ³n del paquete reshape2
ggplot(df1, aes(x = muestra, y = Freq)) +
geom_bar (stat="identity", position = "dodge")
x <- seq(80, 140, 0.1) # 1.
y <- dnorm(x = x, mean = 110, sd = 7)
data <- data.frame(x, y)
tail(data)
p <- ggplot(data, aes(x, y)) + geom_line()
p
pnorm(140, mean = 110, sd = 7, lower.tail = FALSE) # 2.
qnorm(0.95, mean = 110, sd = 7) # 3.
set.seed(19) # 4.
ma <- rnorm(1000, mean = 110, sd = 7)
madf <- as.data.frame(ma)
tail(madf)
p <- ggplot(madf, aes(ma)) +
geom_histogram(colour = 'red',
fill = 'blue',
alpha = 0.8, # Intensidad del color fill
binwidth = 3.5) +
geom_density(aes(y = 3.5*..count..))+
geom_vline(xintercept = mean(ma),
linetype="dashed", color = "black") +
ggtitle('Histograma para la muestra normal') +
labs(x = 'Valores obtenidos', y = 'Frecuencia')+
theme_dark() +
theme(plot.title = element_text(hjust = 0.5, size = 16))
p
library(dplyr)
library(reshape2)
library(ggplot2)
data1718 <- read.csv("https://www.football-data.co.uk/mmz4281/1718/SP1.csv")
data1819 <- read.csv("https://www.football-data.co.uk/mmz4281/1819/SP1.csv")
data1920 <- read.csv("https://www.football-data.co.uk/mmz4281/1920/SP1.csv")
View(data1718)
lista <- list(data1718, data1819, data1920)
lista <- lapply(lista, select, Date, HomeTeam, AwayTeam, FTHG, FTAG, FTR)
lista[[1]] <- mutate(lista[[1]], Date = as.Date(Date, "%d/%m/%y"))
lista[[2]] <- mutate(lista[[2]], Date = as.Date(Date, "%d/%m/%Y"))
data <- do.call(rbind, lista)
x <- data$FTHG
y <- data$FTAG
(tablex <- table(x))
(tablex <- prop.table(tablex))
str(tablex)
tablex <- as.data.frame(tablex)
str(tablex)
plotx <- ggplot(tablex, aes(x = x, y = Freq)) +
geom_bar (stat="identity", fill = 'blue') +
ggtitle('Equipo de casa')
plotx
(tabley <- table(y))
(tabley <- prop.table(tabley))
str(tabley)
tabley <- as.data.frame(tabley)
str(tabley)
ploty <- ggplot(tabley, aes(x = y, y = Freq)) +
geom_bar (stat="identity", fill = 'purple') +
ggtitle('Equipo de visita')
ploty
(tablexy <- table(x,y))
(tablexy <- prop.table(tablexy))
str(tablexy)
tablexy <- melt(tablexy)
str(tablexy)
tablexy %>% ggplot(aes(x, y)) +
geom_tile(aes(fill = value)) +
ggtitle('Probabilidades Conjuntas') +
scale_fill_gradient(low = 'blue', high = 'red') +
theme(axis.text.x = element_text(angle = 90, hjust = 0))
soccer.data <- read.csv("https://www.football-data.co.uk/mmz4281/1920/SP1.csv")
(x <- soccer.data$FTHG)
(y <- soccer.data$FTAG)
(tablex <- table(x))
(prop.table(tablex))
(tabley <- table(y))
(prop.table(tabley))
(tablexy <- table(x,y))
#SoluciÃ³n al Postwork SesiÃ³n 1
#Primera parte
url <- "https://www.football-data.co.uk/mmz4281/1920/SP1.csv" # url donde se encuentra el archivo csv
data <- read.csv(file = url) # ImportaciÃ³n de los datos a R
dim(data) # NÃºmero de filas y nÃºmero de columnas del data frame
#Segunda parte
data$FTHG # Goles anotados por los equipos que jugaron en casa
data$FTAG # Goles anotados por los equipos que jugaron como visitante
#Tercera parte
(table(data$FTHG)/dim(data)[1])*100 # Probabilidades marginales estimadas
(table(data$FTAG)/dim(data)[1])*100 # Probabilidades marginales estimadas
(table(data$FTHG, data$FTAG)/dim(data)[1])*100 # Probabilidades conjuntas estimadas
(prop.table(tablexy))
(table(data$FTHG, data$FTAG)/dim(data)[1])*100 # Probabilidades conjuntas estimadas
library(DBI)
library(RMySQL)
MyDataBase <- dbConnect(
drv = RMySQL::MySQL(),
dbname = "shinydemo",
host = "shiny-demo.csa7qlmguqrf.us-east-1.rds.amazonaws.com",
username = "guest",
password = "guest")
dbListTables(MyDataBase)
dbListFields(MyDataBase, 'City')
DataDB <- dbGetQuery(MyDataBase, "select * from City")
class(DataDB)
head(DataDB)
pop.mean <- mean(DataDB$Population)  # Media a la variable de poblaciÃ³n
pop.mean
pop.3 <- pop.mean *3   # Operaciones aritmÃ©ticas
pop.3
library(dplyr)
library(dplyr)
pop50.mex <-  DataDB %>% filter(CountryCode == "MEX" ,  Population > 50000)   # Ciudades del paÃ­s de MÃ©xico con mÃ¡s de 50,000 habitantes
dbListTables(MyDataBase)
dbListTables(MyDataBase)
dbListFields(MyDataBase, 'City')
library(dbplyr)
library(pool)
my_db <- dbPool(
RMySQL::MySQL(),
dbname = "shinydemo",
host = "shiny-demo.csa7qlmguqrf.us-east-1.rds.amazonaws.com",
username = "guest",
password = "guest"
)
dbListTables(my_db)
library(dbplyr)
library(pool)
my_db <- dbPool(
RMySQL::MySQL(),
dbname = "shinydemo",
host = "shiny-demo.csa7qlmguqrf.us-east-1.rds.amazonaws.com",
username = "guest",
password = "guest"
)
dbListTables(my_db)
my_db %>% tbl("Country") %>% head(5) # library(dplyr)
my_db %>% tbl("CountryLanguage") %>% head(5)
library(DBI)
conn <- dbConnect(
drv = RMySQL::MySQL(),
dbname = "shinydemo",
host = "shiny-demo.csa7qlmguqrf.us-east-1.rds.amazonaws.com",
username = "guest",
password = "guest")
rs <- dbSendQuery(conn, "SELECT * FROM City LIMIT 5;")
dbFetch(rs)
dbClearResult(rs)
dbDisconnect(conn)
library(rjson)            # Quitar comillas del nombre
URL <- "https://tools.learningcontainer.com/sample-json-file.json" # Asignando el link a una variable
JsonData <- fromJSON(file= URL)     # Se guarda el JSon en un objeto de R
class(JsonData)                     # Vemos que tipo de objeto es JsonData
str(JsonData)                       # Vemos la naturaleza de sus variables
sqrt(JsonData$Mobile)
# install.packages("XML")
library(XML)
link <- "http://www-db.deis.unibo.it/courses/TW/DOCS/w3schools/xml/cd_catalog.xml"
# Analizando el XML desde la web
xmlfile <- xmlTreeParse(link)
summary(xmlfile)
head(xmlfile)
#Extraer los valores xml
topxml <- xmlSApply(xmlfile, function(x) xmlSApply(x, xmlValue))
# Colocandolos en un Data Frame
xml_df <- data.frame(t(topxml), row.names= NULL)
str(xml_df) # Observar la naturaleza de las variables del DF
xml_df$PRICE <- as.numeric(xml_df$PRICE)
xml_df$YEAR <- as.numeric(xml_df$YEAR)
mean(xml_df$PRICE)
mean(xml_df$YEAR)
data_df <- xmlToDataFrame(link)
# install.packages("XML")
library(XML)
link <- "http://www-db.deis.unibo.it/courses/TW/DOCS/w3schools/xml/cd_catalog.xml"
# Analizando el XML desde la web
xmlfile <- xmlTreeParse(link)
summary(xmlfile)
head(xmlfile)
#Extraer los valores xml
topxml <- xmlSApply(xmlfile, function(x) xmlSApply(x, xmlValue))
# Colocandolos en un Data Frame
xml_df <- data.frame(t(topxml), row.names= NULL)
str(xml_df) # Observar la naturaleza de las variables del DF
xml_df$PRICE <- as.numeric(xml_df$PRICE)
xml_df$YEAR <- as.numeric(xml_df$YEAR)
mean(xml_df$PRICE)
mean(xml_df$YEAR)
data_df <- xmlToDataFrame(link)
head(data_df)
# install.packages("rvest")
library(rvest)
theurl <- "https://solarviews.com/span/data2.htm"
file <- read_html(theurl)    # Leemos el html
tables <- html_nodes(file, "table")
table1 <- html_table(tables[4], fill = TRUE)
table <- na.omit(as.data.frame(table1))   # Quitamos NAÂ´s que meten filas extras
str(table)  # Vemos la naturaleza de las variables
table$Albedo <- as.numeric(table$Albedo)
str(table)
library(rvest)
theurl <- "https://www.glassdoor.com.mx/Sueldos/data-scientist-sueldo-SRCH_KO0,14.htm"
file<-read_html(theurl)
tables<-html_nodes(file, "table")
tables<-html_nodes(file, "table")
table1 <- html_table(tables[1], fill = TRUE)
table <- na.omit(as.data.frame(table1))
str(table)
#Removiendo caracteres inncesarios
a <- gsub("MXN","",table$Sueldo)
a <- gsub("[^[:alnum:][:blank:]?]", "", a)
a <- gsub("mes", "", a)
a <- as.numeric(a)
table$Sueldo <- a
#Removiendo caracteres inncesarios
b <- gsub("Sueldos para Data Scientist en ", "", table$Cargo)
setwd("~/Programacion-con-R-Santander-master/Modulo-2-BEDU-Equipo-15/Project")
data <- read.csv("Indicadores20210129225331.csv")
data <- read.csv("Indicadores20210129225331.csv")
view(data)
head(data)
data
library(readxl) # Load Excel files
install.packages("readxl")
library(readxl) # Load Excel files
brooklyn <- read_excel("Indicadores20210129225331.csv", skip = 5)
brooklyn <- read_csv("Indicadores20210129225331.csv", skip = 5)
install.packages("readcsv")
library(readcsv) # Load Excel files
install.packages("readr")
library(readr) # Load Excel files
brooklyn <- read_csv("Indicadores20210129225331.csv", skip = 5)
brooklyn
data <- read.csv("Indicadores_data.csv")
data
data <- read.csv("Indicadores_clean.csv")
data
data <- read.csv("Indicadores_clean.csv")
data
data <- read.csv("SP1-1011.csv")
data
data <- read.csv("SP1-1011.csv", sep = ";")
data
data <- read.csv("SP1-1011.csv", sep = ",")
data
data <- read.csv("indicadores_clean.csv", sep = ",")
data
