mean(m1.4)
set.seed(64) # Para reproducir las muestras en el futuro
(m5.3 <- sapply(X = rep(3, 5), FUN = rexp, 2))
(media5.3 <- apply(m5.3, 2, mean))
set.seed(465) # Para reproducir las muestras en el futuro
m1000.7 <- sapply(X = rep(7, 1000), FUN = rexp, 2)
media1000.7 <- apply(m1000.7, 2, mean)
mdf <- as.data.frame(media1000.7)
tail(mdf)
ggplot(mdf, aes(media1000.7)) +
geom_histogram(colour = 'green',
fill = 'orange',
alpha = 0.7) + # Intensidad del color fill
geom_vline(xintercept = mean(media1000.7), linetype="dashed", color = "black") +
ggtitle('Histograma para las 1000 medias') +
labs(x = 'medias', y = 'Frecuencia')+
theme_bw() +
theme(plot.title = element_text(hjust = 0.5, size = 16))
mean(media1000.7); 1/2 # Media de las 1000 medias y media de la población de la cual vienen las 1000 muestras
sd(media1000.7); (1/2)/sqrt(7) # DE de las 1000 medias y DE de la población de la cual vienen las 1000 muestras dividida por la raíz del tamaño de la muestra
set.seed(4465) # Para reproducir las muestras en el futuro
m1000.33 <- sapply(X = rep(33, 1000), FUN = rexp, 2)
media1000.33 <- apply(m1000.33, 2, mean)
mdf <- as.data.frame(media1000.33)
tail(mdf)
ggplot(mdf, aes(media1000.33)) +
geom_histogram(colour = 'yellow',
fill = 'purple',
alpha = 0.7) + # Intensidad del color fill
geom_vline(xintercept = mean(media1000.33), linetype="dashed", color = "black") +
ggtitle('Histograma para las 1000 medias') +
labs(x = 'medias', y = 'Frecuencia')+
theme_get() +
theme(plot.title = element_text(hjust = 0.5, size = 16))
mean(media1000.33); 1/2 # Media de las 1000 medias y media de la población de la cual vienen las 1000 muestras
sd(media1000.33); (1/2)/sqrt(33) # DE de las 1000 medias y DE de la población de la cual vienen las 1000 muestras dividida por la raíz del tamaño de la muestra
set.seed(543465) # Para reproducir las muestras en el futuro
set.seed(104)
muestra <- rexp(n = 40, rate = 6) # media = 1/6 aprox 0.1667 (media de la población)
tail(as.data.frame(muestra))
z0 <- (mean(muestra)-0.1)/(sd(muestra)/sqrt(40))
z0
(z.05 <- qnorm(p = 0.05, lower.tail = FALSE))
z0 > z.05
(pvalue <- pnorm(z0, lower.tail = FALSE))
x <- seq(-4, 4, 0.01)
y <- dnorm(x)
plot(x, y, type = "l", xlab="", ylab="")
title(main = "Densidad normal estándar", sub = expression(paste(mu == 0, " y ", sigma == 1)))
polygon(c(z0, x[x>=z0], max(x)), c(0, y[x>=z0], 0), col="red")
axis(side = 1, at = z0, font = 2, padj = 1, lwd = 2)
library(TSA)
install.packages('TSA')
install.packages("TSA")
library(TSA)
install.packages("TSA")
install.packages("TSA")
library(TSA)
data(oilfilters); plot(oilfilters, type = "o", ylab = "Ventas", xlab = "Tiempo", main = "Ventas Mesuales ")
plot(oilfilters, type = "l", ylab = "Ventas", xlab = "Tiempo",
main = "Ventas Mensuales de Filtro de Aceite",
sub = "Símbolos Especiales")
points(y = oilfilters, x = time(oilfilters),
pch = as.vector(season(oilfilters)))
data(AirPassengers)
AP <- AirPassengers
AP
class(AP)
start(AP); end(AP); frequency(AP)
summary(AP)
plot(AP, ylab = "Pasajeros (1000's)", xlab = "Tiempo",
main = "Reserva de pasajeros aéreos internacionales",
sub = "Estados Unidos en el periodo 1949-1960")
layout(1:2)
plot(aggregate(AP), xlab = "Tiempo",
main = "Reserva de pasajeros aéreos internacionales",
sub = "Estados Unidos en el periodo 1949-1960")
boxplot(AP ~ cycle(AP),
xlab = "Boxplot de valores estacionales",
sub = "Estados Unidos en el periodo 1949-1960",
main = "Reserva de pasajeros aéreos internacionales")
dev.off()
CBE <- read.csv(url("https://raw.githubusercontent.com/beduExpert/Programacion-con-R-Santander/master/Sesion-06/Ejemplo-01/cbe.csv"), header = TRUE, sep = ',')
CBE[1:4,]
class(CBE)
Elec.ts <- ts(CBE[, 3], start = 1958, freq = 12)
Beer.ts <- ts(CBE[, 2], start = 1958, freq = 12)
Choc.ts <- ts(CBE[, 1], start = 1958, freq = 12)
Electricidad <- Elec.ts
Cerveza <- Beer.ts
Chocolate <- Choc.ts
plot(cbind(Electricidad, Cerveza, Chocolate),
main = "Producción de Chocolate, Cerveza y Electricidad",
xlab = "Tiempo",
sub = "Enero de 1958 - Diciembre de 1990")
Global <- scan(url("https://raw.githubusercontent.com/beduExpert/Programacion-con-R-Santander/master/Sesion-06/Ejemplo-01/global.txt"))
Global.ts <- ts(Global, st = c(1856, 1), end = c(2005, 12), fr = 12)
Global.annual <- aggregate(Global.ts, FUN = mean)
plot(Global.ts, xlab = "Tiempo", ylab = "Temperatura en Â°C", main = "Serie de Temperatura Global",
sub = "Serie mensual: Enero de 1856 a Diciembre de 2005")
plot(Global.annual, xlab = "Tiempo", ylab = "Temperatura en Â°C", main = "Serie de Temperatura Global",
sub = "Serie anual de temperaturas medias: 1856 a 2005")
#window para extraer una muestra de la serie de tiempo
New.series <- window(Global.ts, start = c(1970, 1), end = c(2005, 12))
New.time <- time(New.series)
plot(New.series, xlab = "Tiempo", ylab = "Temperatura en Â°C", main = "Serie de Temperatura Global",
sub = "Serie mensual: Enero de 1970 a Diciembre de 2005"); abline(reg = lm(New.series ~ New.time))
CBE <- read.csv("cbe.csv", header = TRUE)
CBE <- read.csv(url("https://raw.githubusercontent.com/beduExpert/Programacion-con-R-Santander/master/Sesion-06/Ejemplo-01/cbe.csv"), header = TRUE, sep = ',')
Elec.ts <- ts(CBE[, 3], start = 1958, freq = 12)
Elec.decom.A <- decompose(Elec.ts)
Elec.ts <- ts(CBE[, 3], start = 1958, freq = 12)
Elec.decom.A <- decompose(Elec.ts)
cplot(Elec.decom.A, xlab = "Tiempo",
sub = "Descomposición de los datos de producción de electricidad")
cplot(Elec.decom.A, xlab = "Tiempo",
sub = "Descomposición de los datos de producción de electricidad")
Tendencia <- Elec.decom.A$trend
Estacionalidad <- Elec.decom.A$seasonal
Aleatorio <- Elec.decom.A$random
ts.plot(cbind(Tendencia, Tendencia + Estacionalidad),
xlab = "Tiempo", main = "Datos de Producción de Electricidad",
ylab = "Producción de electricidad", lty = 1:2,
sub = "Tendencia con efectos estacionales aditivos sobrepuestos")
Tendencia[20] + Estacionalidad[20] + Aleatorio[20]
Elec.ts[20]
Elec.decom.M <- decompose(Elec.ts, type = "mult")
plot(Elec.decom.M, xlab = "Tiempo",
sub = "Descomposición de los datos de producción de electricidad")
Trend <- Elec.decom.M$trend
Seasonal <- Elec.decom.M$seasonal
Random <- Elec.decom.M$random
ts.plot(cbind(Trend, Trend*Seasonal), xlab = "Tiempo", main = "Datos de Producción de Electricidad",
ylab = "Producción de electricidad", lty = 1:2,
sub = "Tendencia con efectos estacionales multiplicativos sobrepuestos")
Trend[7]*Seasonal[7]*Random[7]
Elec.ts[7]
Trend[100]*Seasonal[100]*Random[100]
Elec.ts[100]
set.seed(1)
w <- rnorm(100)
plot(w, type = "l", xlab = "")
title(main = "Ruido Blanco Gaussiano", xlab = "Tiempo")
x <- seq(-3, 3, length = 1000)
hist(rnorm(100), prob = T, ylab = "", xlab = "", main = "")
points(x, dnorm(x), type = "l")
title(ylab = "Densidad", xlab = "Valores simulados de la distribución normal estandar",
main = "Comparación de una muestra con su población subyacente")
set.seed(2)
acf(rnorm(100), main = "")
title(main = "Función de Autocorrelación Muestral",
sub = "Valores simulados de la distribución normal estandar")
x <- w <- rnorm(1000)
for(t in 2:1000) x[t] <- x[t-1] + w[t]
plot(x, type = "l", main = "Caminata Aleatoria Simulada",
xlab = "t", ylab = expression(x[t]),
sub = expression(x[t]==x[t-1]+w[t]))
acf(x, main = "")
plot(x, type = "l", main = "Caminata Aleatoria Simulada",
xlab = "t", ylab = expression(x[t]),
sub = expression(x[t]==x[t-1]+w[t]))
acf(x, main = "")
title(main = "Correlograma para la caminata aleatoria simulada",
sub = expression(x[t]==x[t-1]+w[t]))
acf(diff(x), main = "")
title(main = "Correlograma de la serie de diferencias",
sub = expression(nabla*x[t]==x[t]-x[t-1]))
rho <- function(k, alpha) alpha^k
plot(0:10, rho(0:10, 0.7), type = "h", ylab = "", xlab = "")
title(main = "Correlograma para un proceso AR(1)",
ylab = expression(rho[k] == alpha^k),
xlab = "lag k",
sub = expression(x[t]==0.7*x[t-1]+w[t]))
plot(0:10, rho(0:10, 0.3), type = "h", ylab = "", xlab = "")
title(main = "Correlograma para un proceso AR(1)",
ylab = expression(rho[k] == alpha^k),
xlab = "lag k",
sub = expression(x[t]==0.7*x[t-1]+w[t]))
plot(0:10, rho(0:10, 0.5), type = "h", ylab = "", xlab = "")
plot(0:10, rho(0:10, 0.7), type = "h", ylab = "", xlab = "")
title(main = "Correlograma para un proceso AR(1)",
ylab = expression(rho[k] == alpha^k),
xlab = "lag k",
sub = expression(x[t]==0.7*x[t-1]+w[t]))
plot(0:10, rho(0:10, -0.7), type = "h", ylab = "", xlab = "")
title(main = "Correlograma para un proceso AR(1)",
ylab = expression(rho[k] == alpha^k),
xlab = "lag k",
sub = expression(x[t]==-0.7*x[t-1]+w[t]))
abline(h = 0)
set.seed(1)
x <- w <- rnorm(100)
for(t in 2:100) x[t] <- 0.7 * x[t-1] + w[t]
plot(x, type = "l", xlab = "", ylab = "")
title(main = "Proceso AR(1) simulado",
xlab = "Tiempo",
ylab = expression(x[t]),
sub = expression(x[t]==0.7*x[t-1]+w[t]))
acf(x, main = "")
title(main = "Correlograma del proceso AR(1) simulado",
sub = expression(x[t]==0.7*x[t-1]+w[t]))
pacf(x, main = "")
title(main = "Correlograma Parcial del proceso AR(1) simulado",
sub = expression(x[t]==0.7*x[t-1]+w[t]))
x.ar <- ar(x, method = "mle")
x.ar <- ar(x, method = "mle")
x.ar$order
x.ar$ar
x.ar$ar + c(-2, 2)*sqrt(x.ar$asy.var)
Global <- scan(url("https://raw.githubusercontent.com/beduExpert/Programacion-con-R-Santander/master/Sesion-06/Ejemplo-02/global.txt"))
Global.ts <- ts(Global, st = c(1856, 1), end = c(2005, 12), fr = 12)
Global.annual <- aggregate(Global.ts, FUN = mean)
plot(Global.ts, xlab = "Tiempo", ylab = "Temperatura en Â°C",
main = "Serie de Temperatura Global",
sub = "Serie mensual: Enero de 1856 a Diciembre de 2005")
plot(Global.annual, xlab = "Tiempo", ylab = "Temperatura en Â°C",
main = "Serie de Temperatura Global",
sub = "Serie anual de temperaturas medias: 1856 a 2005")
mean(Global.annual)
Global.ar <- ar(Global.annual, method = "mle")
Global.ar$order
Global.ar$ar
acf(Global.ar$res[-(1:Global.ar$order)], lag = 50, main = "")
title(main = "Correlograma de la serie de residuales",
sub = "Modelo AR(4) ajustado a la serie de temperaturas globales anuales")
rho <- function(k, beta){
q <- length(beta) - 1
if(k > q) ACF <- 0 else {
s1 <- 0; s2 <- 0
for(i in 1:(q-k+1)) s1 <- s1 + beta[i]*beta[i + k]
for(i in 1:(q+1)) s2 <- s2 + beta[i]^2
ACF <- s1/s2}
ACF}
beta <- c(1, 0.7, 0.5, 0.2)
rho.k <- rep(1, 10)
for(k in 1:10) rho.k[k] <- rho(k, beta)
plot(0:10, c(1, rho.k), ylab = expression(rho[k]), xlab = "lag k", type = "h",
sub = expression(x[t] == w[t] + 0.7*w[t-1] + 0.5*w[t-2] + 0.2*w[t-3]),
main = "Función de autocorrelación para un proceso MA(3)")
abline(0, 0)
beta <- c(1, -0.7, 0.5, -0.2)
rho.k <- rep(1, 10)
for(k in 1:10) rho.k[k] <- rho(k, beta)
plot(0:10, c(1, rho.k), ylab = expression(rho[k]), xlab = "lag k", type = "h",
sub = expression(x[t] == w[t] - 0.7*w[t-1] + 0.5*w[t-2] - 0.2*w[t-3]),
main = "Función de autocorrelación para un proceso MA(3)")
abline(0, 0)
set.seed(1)
b <- c(0.8, 0.6, 0.4)
x <- w <- rnorm(1000)
for(t in 4:1000){
for(j in 1:3) x[t] <- x[t] + b[j]*w[t-j]
}
plot(x, type = "l", ylab = expression(x[t]), xlab = "Tiempo t",
sub = expression(x[t] == w[t] + 0.8*w[t-1] + 0.6*w[t-2] + 0.4*w[t-3]),
main = "Serie de tiempo simulada de un proceso MA(3)")
acf(x, main = "")
title(main = "Correlograma para un proceso MA(3) simulado",
sub = expression(x[t] == w[t] + 0.8*w[t-1] + 0.6*w[t-2] + 0.4*w[t-3]))
x.ma <- arima(x, order = c(0, 0, 3))
x.ma
set.seed(1)
x <- arima.sim(n = 10000, list(ar = -0.6, ma = 0.5))
plot(x[1:100], type = "l", xlab = "")
title(main = "Serie simulada", xlab = "Tiempo",
sub = expression(x[t] == -0.6*x[t-1] + w[t] + 0.5*w[t-1]))
coef(arima(x, order = c(1, 0, 1)))
CBE <- read.csv("cbe.csv", header = TRUE)
CBE <- read.csv(url("https://raw.githubusercontent.com/beduExpert/Programacion-con-R-Santander/master/Sesion-06/Ejemplo-02/cbe.csv"), header = TRUE, sep = ',')
Elec.ts <- ts(CBE[, 3], start = 1958, freq = 12)
plot(Elec.ts, xlab = "", ylab = "")
title(main = "Serie de Producción de Electricidad",
xlab = "Tiempo",
ylab = "Producción de electricidad")
plot(log(Elec.ts), xlab = "", ylab = "")
title(main = "Serie-log de Producción de Electricidad",
xlab = "Tiempo",
ylab = "Log de Producción de electricidad")
Time <- 1:length(Elec.ts)
Imth <- cycle(Elec.ts)
Elec.lm <- lm(log(Elec.ts) ~ Time + I(Time^2) + factor(Imth))
acf(resid(Elec.lm), main = "")
title(main = "Correlograma de la serie de residuales del modelo de regresión",
sub = "Serie de producción de electricidad")
plot(resid(Elec.lm), type = "l", main = "", xlab = "", ylab = "")
title(main = "Serie de residuales del modelo de regresión ajustado",
sub = "Serie de producción de electricidad",
xlab = "Tiempo",
ylab = "Residuales")
best.order <- c(0, 0, 0)
best.aic <- Inf
for(i in 0:2)for(j in 0:2){
model <- arima(resid(Elec.lm), order = c(i, 0, j))
fit.aic <- AIC(model)
if(fit.aic < best.aic){
best.order <- c(i, 0, j)
best.arma <- arima(resid(Elec.lm), order = best.order)
best.aic <- fit.aic
}
}
best.order
acf(resid(best.arma), main = "")
title(main = "Serie de residuales del modelo ARMA(2, 0) ajustado",
sub = "Serie de residuales del modelo de regresión ajustado a los datos de electricidad")
new.time <- seq(length(Elec.ts)+1, length = 36)
new.data <- data.frame(Time = new.time, Imth = rep(1:12, 3))
predict.lm <- predict(Elec.lm, new.data)
predict.arma <- predict(best.arma, n.ahead = 36)
elec.pred <- ts(exp(predict.lm + predict.arma$pred), start = 1991, freq = 12)
ts.plot(cbind(Elec.ts, elec.pred), lty = 1:2,
col = c("blue", "red"), xlab = "Tiempo",
ylab = "Producción de electricidad",
main = "Predicción de los datos de producción de electricidad",
sub = "Predicción de 36 meses")
x <- w <- rnorm(200)
for(t in 2:200) x[t] <- 0.5 * x[t-1] + w[t]
plot(x, type = "l", xlab = "", ylab = "")
title(main = "Proceso AR(1) simulado",
xlab = "Tiempo",
ylab = expression(x[t]),
sub = expression(x[t]==0.5*x[t-1]+w[t]))
acf(x, main = "")
title(main = "Correlograma del proceso AR(1) simulado",
sub = expression(x[t]==0.5*x[t-1]+w[t]))
pacf(x, main = "")
title(main = "Correlograma Parcial del proceso AR(1) simulado",
sub = expression(x[t]==0.5*x[t-1]+w[t]))
x.ar <- ar(x, method = "mle")
x.ar$order
x.ar$ar
Elec.ts <- ts(CBE[, 3], start = 1958, freq = 12)
plot(Elec.ts, xlab = "", ylab = "")
title(main = "Serie de Producción de Electricidad Australiana",
ylab = "Producción de electricidad (GWh)",
xlab = "Tiempo")
plot(diff(Elec.ts), xlab = "", ylab = "")
title(main = "Serie Diferenciada de Producción de Electricidad Australiana",
xlab = "Tiempo", ylab = "Dif Serie",
sub = "Gráfica de la serie diferenciada de primer órden")
plot(diff(log(Elec.ts)), xlab = "", ylab = "")
title(main = "Serie de log dif de Producción de Electricidad Australiana",
xlab = "Tiempo", ylab = "Dif log-Serie",
sub = "Gráfica de la serie log-transformada diferenciada de primer órden")
set.seed(1)
x <- w <- rnorm(1000)
for(i in 3:1000) x[i] <- 0.5*x[i-1] + x[i-1] - 0.5*x[i-2] + w[i] + 0.3*w[i-1]
plot(x, type = "l",
main = "Serie simulada de un modelo ARIMA(1, 1, 1)",
xlab = "Tiempo",
ylab = expression(x[t]),
sub = expression(x[t] == 0.5*x[t-1] + x[t-1] - 0.5*x[t-2] + w[t] + 0.3*w[t-1]))
arima(x, order = c(1, 1, 1))
x <- arima.sim(model = list(order = c(1, 1, 1), ar = 0.5, ma = 0.3), n = 1000)
arima(x, order = c(1, 1, 1))
CBE <- read.csv("cbe.csv", header = TRUE)
Beer.ts <- ts(CBE[, 2], start = 1958, freq = 12)
plot(Beer.ts, xlab = "", ylab = "")
title(main = "Serie de Producción de Cerveza en Australia",
ylab = "Producción de Cerveza (Megalitros)",
xlab = "Mes")
Beer.ima <- arima(Beer.ts, order = c(0, 1, 1))
Beer.ima
acf(resid(Beer.ima), main = "")
title(main = "Autocorrelaciones para los Residuales del Ajuste",
sub = expression(x[t]==x[t-1]+w[t]-0.33*w[t-1]))
Beer.1991 <- predict(Beer.ima, n.ahead = 12)
sum(Beer.1991$pred)
Elec.ts <- ts(CBE[, 3], start = 1958, freq = 12)
plot(Elec.ts, xlab = "", ylab = "")
title(main = "Serie de Producción de Electricidad Australiana",
ylab = "Producción de electricidad (GWh)",
xlab = "Tiempo")
plot(log(Elec.ts), xlab = "", ylab = "")
title(main = "Log de Serie de Producción de Electricidad Australiana",
ylab = "Log de Producción de electricidad (GWh)",
xlab = "Tiempo")
Elec.AR <- arima(log(Elec.ts), order = c(1, 1, 0),
seas = list(order = c(1, 0, 0), 12))
Elec.MA <- arima(log(Elec.ts), order = c(0, 1, 1),
seas = list(order = c(0, 0, 1), 12))
AIC(Elec.AR)
AIC(Elec.MA)
get.best.arima <- function(x.ts, maxord = c(1, 1, 1, 1, 1, 1)){
best.aic <- 1e8
n <- length(x.ts)
for(p in 0:maxord[1])for(d in 0:maxord[2])for(q in 0:maxord[3])
for(P in 0:maxord[4])for(D in 0:maxord[5])for(Q in 0:maxord[6])
{
fit <- arima(x.ts, order = c(p, d, q),
seas = list(order = c(P, D, Q),
frequency(x.ts)), method = "CSS")
fit.aic <- -2*fit$loglik + (log(n) + 1)*length(fit$coef)
if(fit.aic < best.aic){
best.aic <- fit.aic
best.fit <- fit
best.model <- c(p, d, q, P, D, Q)
}
}
list(best.aic, best.fit, best.model)
}
best.arima.elec <- get.best.arima(log(Elec.ts),
maxord = c(2, 2, 2, 2, 2, 2))
best.fit.elec <- best.arima.elec[[2]]  # Modelo
best.arima.elec[[3]] # Tipo de modelo (órdenes)
best.fit.elec
best.arima.elec[[1]] # AIC
acf(resid(best.fit.elec), main = "")
title(main = "Correlograma de los residuales del ajuste")
pr <- predict(best.fit.elec, 12)$pred
ts.plot(cbind(window(Elec.ts, start = 1981),
exp(pr)), col = c("blue", "red"), xlab = "")
title(main = "Predicción para la serie de producción de electricidad",
xlab = "Mes",
ylab = "Producción de electricidad (GWh)")
shiny::runApp('D:/bedu/Modulo-2-BEDU-Equipo-15/Session-08/ejemplo_01/ejemplo1')
runApp('D:/r/repoCursoMuestra/Programacion-con-R-Santander-master/Sesion-08/Ejemplo-01')
runApp('D:/r/repoCursoMuestra/Programacion-con-R-Santander-master/Sesion-08/Ejemplo-02')
runApp('D:/r/repoCursoMuestra/Programacion-con-R-Santander-master/Sesion-08/Ejemplo-02')
runApp('D:/r/repoCursoMuestra/Programacion-con-R-Santander-master/Sesion-08/Ejemplo-02')
runApp('D:/bedu/Modulo-2-BEDU-Equipo-15/Session-08/postwork_8')
runApp('D:/r/repoCursoMuestra/Programacion-con-R-Santander-master/Sesion-08/Ejemplo-03')
runApp('D:/r/repoCursoMuestra/Programacion-con-R-Santander-master/Sesion-08/Ejemplo-05')
runApp('D:/r/repoCursoMuestra/Programacion-con-R-Santander-master/Sesion-08/Ejemplo-05')
setwd("D:/bedu/Modulo-2-BEDU-Equipo-15/Session-08/postwork_8")
head(teams, n = 2L); dim(teams); head(scores, n = 2L); dim(scores)
df <- create.fbRanks.dataframes(scores.file = "match.data.csv")
library(fbRanks)
library(dplyr)
library(ggplot2)
df <- create.fbRanks.dataframes(scores.file = "match.data.csv")
teams <- df$teams; scores <- df$scores
head(teams, n = 2L); dim(teams); head(scores, n = 2L); dim(scores)
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(dplyr)
library(reshape2)
library(ggplot2)
data1718 <- read.csv("https://www.football-data.co.uk/mmz4281/1718/SP1.csv")
data1819 <- read.csv("https://www.football-data.co.uk/mmz4281/1819/SP1.csv")
data1920 <- read.csv("https://www.football-data.co.uk/mmz4281/1920/SP1.csv")
View(data1718)
View(data1819)
lista <- list(data1718, data1819, data1920)
lista <- lapply(lista, select, Date, HomeTeam, AwayTeam, FTHG, FTAG, FTR)
head(lista[[1]]); head(lista[[2]]); head(lista[[3]]);
lista[[1]] <- mutate(lista[[1]], Date = as.Date(Date, "%d/%m/%y"))
lista[[2]] <- mutate(lista[[2]], Date = as.Date(Date, "%d/%m/%Y"))
lista[[3]] <- mutate(lista[[3]], Date = as.Date(Date, "%d/%m/%Y"))
head(lista[[1]]); head(lista[[2]]); head(lista[[3]]);
data <- do.call(rbind, lista)
head(data)
x <- data$FTHG
y <- data$FTAG
(tablex <- table(x))
(tablex <- prop.table(tablex))
str(tablex)
tablex <- as.data.frame(tablex)
str(tablex)
(tabley <- table(y))
(tabley <- prop.table(tabley))
str(tabley)
tabley <- as.data.frame(tabley)
str(tabley)
(tablexy <- table(x,y))
(tablexy <- prop.table(tablexy))
str(tablexy)
tablexy <- melt(tablexy)
str(tablexy)
plotx <- ggplot(tablex, aes(x = x, y = Freq)) +
geom_bar (stat="identity", fill = 'blue') +
ggtitle('Equipo de casa')
plotx
ploty <- ggplot(tabley, aes(x = y, y = Freq)) +
geom_bar (stat="identity", fill = 'purple') +
ggtitle('Equipo de visita')
ploty
tablexy %>% ggplot(aes(x, y)) +
geom_tile(aes(fill = value)) +
ggtitle('Probabilidades Conjuntas') +
scale_fill_gradient(low = 'blue', high = 'red') +
theme(axis.text.x = element_text(angle = 90, hjust = 0))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
