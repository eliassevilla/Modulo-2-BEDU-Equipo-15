Choc.ts <- ts(CBE[, 1], start = 1958, freq = 12)
Electricidad <- Elec.ts
Cerveza <- Beer.ts
Chocolate <- Choc.ts
plot(cbind(Electricidad, Cerveza, Chocolate),
main = "Producción de Chocolate, Cerveza y Electricidad",
xlab = "Tiempo",
sub = "Enero de 1958 - Diciembre de 1990")
Global <- scan(url("https://raw.githubusercontent.com/beduExpert/Programacion-con-R-Santander/master/Sesion-06/Ejemplo-01/global.txt"))
Global.ts <- ts(Global, st = c(1856, 1), end = c(2005, 12), fr = 12)
Global.annual <- aggregate(Global.ts, FUN = mean)
plot(Global.ts, xlab = "Tiempo", ylab = "Temperatura en Â°C", main = "Serie de Temperatura Global",
sub = "Serie mensual: Enero de 1856 a Diciembre de 2005")
plot(Global.annual, xlab = "Tiempo", ylab = "Temperatura en Â°C", main = "Serie de Temperatura Global",
sub = "Serie anual de temperaturas medias: 1856 a 2005")
#window para extraer una muestra de la serie de tiempo
New.series <- window(Global.ts, start = c(1970, 1), end = c(2005, 12))
New.time <- time(New.series)
plot(New.series, xlab = "Tiempo", ylab = "Temperatura en Â°C", main = "Serie de Temperatura Global",
sub = "Serie mensual: Enero de 1970 a Diciembre de 2005"); abline(reg = lm(New.series ~ New.time))
CBE <- read.csv("cbe.csv", header = TRUE)
CBE <- read.csv(url("https://raw.githubusercontent.com/beduExpert/Programacion-con-R-Santander/master/Sesion-06/Ejemplo-01/cbe.csv"), header = TRUE, sep = ',')
Elec.ts <- ts(CBE[, 3], start = 1958, freq = 12)
Elec.decom.A <- decompose(Elec.ts)
Elec.ts <- ts(CBE[, 3], start = 1958, freq = 12)
Elec.decom.A <- decompose(Elec.ts)
cplot(Elec.decom.A, xlab = "Tiempo",
sub = "Descomposición de los datos de producción de electricidad")
cplot(Elec.decom.A, xlab = "Tiempo",
sub = "Descomposición de los datos de producción de electricidad")
Tendencia <- Elec.decom.A$trend
Estacionalidad <- Elec.decom.A$seasonal
Aleatorio <- Elec.decom.A$random
ts.plot(cbind(Tendencia, Tendencia + Estacionalidad),
xlab = "Tiempo", main = "Datos de Producción de Electricidad",
ylab = "Producción de electricidad", lty = 1:2,
sub = "Tendencia con efectos estacionales aditivos sobrepuestos")
Tendencia[20] + Estacionalidad[20] + Aleatorio[20]
Elec.ts[20]
Elec.decom.M <- decompose(Elec.ts, type = "mult")
plot(Elec.decom.M, xlab = "Tiempo",
sub = "Descomposición de los datos de producción de electricidad")
Trend <- Elec.decom.M$trend
Seasonal <- Elec.decom.M$seasonal
Random <- Elec.decom.M$random
ts.plot(cbind(Trend, Trend*Seasonal), xlab = "Tiempo", main = "Datos de Producción de Electricidad",
ylab = "Producción de electricidad", lty = 1:2,
sub = "Tendencia con efectos estacionales multiplicativos sobrepuestos")
Trend[7]*Seasonal[7]*Random[7]
Elec.ts[7]
Trend[100]*Seasonal[100]*Random[100]
Elec.ts[100]
set.seed(1)
w <- rnorm(100)
plot(w, type = "l", xlab = "")
title(main = "Ruido Blanco Gaussiano", xlab = "Tiempo")
x <- seq(-3, 3, length = 1000)
hist(rnorm(100), prob = T, ylab = "", xlab = "", main = "")
points(x, dnorm(x), type = "l")
title(ylab = "Densidad", xlab = "Valores simulados de la distribución normal estandar",
main = "Comparación de una muestra con su población subyacente")
set.seed(2)
acf(rnorm(100), main = "")
title(main = "Función de Autocorrelación Muestral",
sub = "Valores simulados de la distribución normal estandar")
x <- w <- rnorm(1000)
for(t in 2:1000) x[t] <- x[t-1] + w[t]
plot(x, type = "l", main = "Caminata Aleatoria Simulada",
xlab = "t", ylab = expression(x[t]),
sub = expression(x[t]==x[t-1]+w[t]))
acf(x, main = "")
plot(x, type = "l", main = "Caminata Aleatoria Simulada",
xlab = "t", ylab = expression(x[t]),
sub = expression(x[t]==x[t-1]+w[t]))
acf(x, main = "")
title(main = "Correlograma para la caminata aleatoria simulada",
sub = expression(x[t]==x[t-1]+w[t]))
acf(diff(x), main = "")
title(main = "Correlograma de la serie de diferencias",
sub = expression(nabla*x[t]==x[t]-x[t-1]))
rho <- function(k, alpha) alpha^k
plot(0:10, rho(0:10, 0.7), type = "h", ylab = "", xlab = "")
title(main = "Correlograma para un proceso AR(1)",
ylab = expression(rho[k] == alpha^k),
xlab = "lag k",
sub = expression(x[t]==0.7*x[t-1]+w[t]))
plot(0:10, rho(0:10, 0.3), type = "h", ylab = "", xlab = "")
title(main = "Correlograma para un proceso AR(1)",
ylab = expression(rho[k] == alpha^k),
xlab = "lag k",
sub = expression(x[t]==0.7*x[t-1]+w[t]))
plot(0:10, rho(0:10, 0.5), type = "h", ylab = "", xlab = "")
plot(0:10, rho(0:10, 0.7), type = "h", ylab = "", xlab = "")
title(main = "Correlograma para un proceso AR(1)",
ylab = expression(rho[k] == alpha^k),
xlab = "lag k",
sub = expression(x[t]==0.7*x[t-1]+w[t]))
plot(0:10, rho(0:10, -0.7), type = "h", ylab = "", xlab = "")
title(main = "Correlograma para un proceso AR(1)",
ylab = expression(rho[k] == alpha^k),
xlab = "lag k",
sub = expression(x[t]==-0.7*x[t-1]+w[t]))
abline(h = 0)
set.seed(1)
x <- w <- rnorm(100)
for(t in 2:100) x[t] <- 0.7 * x[t-1] + w[t]
plot(x, type = "l", xlab = "", ylab = "")
title(main = "Proceso AR(1) simulado",
xlab = "Tiempo",
ylab = expression(x[t]),
sub = expression(x[t]==0.7*x[t-1]+w[t]))
acf(x, main = "")
title(main = "Correlograma del proceso AR(1) simulado",
sub = expression(x[t]==0.7*x[t-1]+w[t]))
pacf(x, main = "")
title(main = "Correlograma Parcial del proceso AR(1) simulado",
sub = expression(x[t]==0.7*x[t-1]+w[t]))
x.ar <- ar(x, method = "mle")
x.ar <- ar(x, method = "mle")
x.ar$order
x.ar$ar
x.ar$ar + c(-2, 2)*sqrt(x.ar$asy.var)
Global <- scan(url("https://raw.githubusercontent.com/beduExpert/Programacion-con-R-Santander/master/Sesion-06/Ejemplo-02/global.txt"))
Global.ts <- ts(Global, st = c(1856, 1), end = c(2005, 12), fr = 12)
Global.annual <- aggregate(Global.ts, FUN = mean)
plot(Global.ts, xlab = "Tiempo", ylab = "Temperatura en Â°C",
main = "Serie de Temperatura Global",
sub = "Serie mensual: Enero de 1856 a Diciembre de 2005")
plot(Global.annual, xlab = "Tiempo", ylab = "Temperatura en Â°C",
main = "Serie de Temperatura Global",
sub = "Serie anual de temperaturas medias: 1856 a 2005")
mean(Global.annual)
Global.ar <- ar(Global.annual, method = "mle")
Global.ar$order
Global.ar$ar
acf(Global.ar$res[-(1:Global.ar$order)], lag = 50, main = "")
title(main = "Correlograma de la serie de residuales",
sub = "Modelo AR(4) ajustado a la serie de temperaturas globales anuales")
rho <- function(k, beta){
q <- length(beta) - 1
if(k > q) ACF <- 0 else {
s1 <- 0; s2 <- 0
for(i in 1:(q-k+1)) s1 <- s1 + beta[i]*beta[i + k]
for(i in 1:(q+1)) s2 <- s2 + beta[i]^2
ACF <- s1/s2}
ACF}
beta <- c(1, 0.7, 0.5, 0.2)
rho.k <- rep(1, 10)
for(k in 1:10) rho.k[k] <- rho(k, beta)
plot(0:10, c(1, rho.k), ylab = expression(rho[k]), xlab = "lag k", type = "h",
sub = expression(x[t] == w[t] + 0.7*w[t-1] + 0.5*w[t-2] + 0.2*w[t-3]),
main = "Función de autocorrelación para un proceso MA(3)")
abline(0, 0)
beta <- c(1, -0.7, 0.5, -0.2)
rho.k <- rep(1, 10)
for(k in 1:10) rho.k[k] <- rho(k, beta)
plot(0:10, c(1, rho.k), ylab = expression(rho[k]), xlab = "lag k", type = "h",
sub = expression(x[t] == w[t] - 0.7*w[t-1] + 0.5*w[t-2] - 0.2*w[t-3]),
main = "Función de autocorrelación para un proceso MA(3)")
abline(0, 0)
set.seed(1)
b <- c(0.8, 0.6, 0.4)
x <- w <- rnorm(1000)
for(t in 4:1000){
for(j in 1:3) x[t] <- x[t] + b[j]*w[t-j]
}
plot(x, type = "l", ylab = expression(x[t]), xlab = "Tiempo t",
sub = expression(x[t] == w[t] + 0.8*w[t-1] + 0.6*w[t-2] + 0.4*w[t-3]),
main = "Serie de tiempo simulada de un proceso MA(3)")
acf(x, main = "")
title(main = "Correlograma para un proceso MA(3) simulado",
sub = expression(x[t] == w[t] + 0.8*w[t-1] + 0.6*w[t-2] + 0.4*w[t-3]))
x.ma <- arima(x, order = c(0, 0, 3))
x.ma
set.seed(1)
x <- arima.sim(n = 10000, list(ar = -0.6, ma = 0.5))
plot(x[1:100], type = "l", xlab = "")
title(main = "Serie simulada", xlab = "Tiempo",
sub = expression(x[t] == -0.6*x[t-1] + w[t] + 0.5*w[t-1]))
coef(arima(x, order = c(1, 0, 1)))
CBE <- read.csv("cbe.csv", header = TRUE)
CBE <- read.csv(url("https://raw.githubusercontent.com/beduExpert/Programacion-con-R-Santander/master/Sesion-06/Ejemplo-02/cbe.csv"), header = TRUE, sep = ',')
Elec.ts <- ts(CBE[, 3], start = 1958, freq = 12)
plot(Elec.ts, xlab = "", ylab = "")
title(main = "Serie de Producción de Electricidad",
xlab = "Tiempo",
ylab = "Producción de electricidad")
plot(log(Elec.ts), xlab = "", ylab = "")
title(main = "Serie-log de Producción de Electricidad",
xlab = "Tiempo",
ylab = "Log de Producción de electricidad")
Time <- 1:length(Elec.ts)
Imth <- cycle(Elec.ts)
Elec.lm <- lm(log(Elec.ts) ~ Time + I(Time^2) + factor(Imth))
acf(resid(Elec.lm), main = "")
title(main = "Correlograma de la serie de residuales del modelo de regresión",
sub = "Serie de producción de electricidad")
plot(resid(Elec.lm), type = "l", main = "", xlab = "", ylab = "")
title(main = "Serie de residuales del modelo de regresión ajustado",
sub = "Serie de producción de electricidad",
xlab = "Tiempo",
ylab = "Residuales")
best.order <- c(0, 0, 0)
best.aic <- Inf
for(i in 0:2)for(j in 0:2){
model <- arima(resid(Elec.lm), order = c(i, 0, j))
fit.aic <- AIC(model)
if(fit.aic < best.aic){
best.order <- c(i, 0, j)
best.arma <- arima(resid(Elec.lm), order = best.order)
best.aic <- fit.aic
}
}
best.order
acf(resid(best.arma), main = "")
title(main = "Serie de residuales del modelo ARMA(2, 0) ajustado",
sub = "Serie de residuales del modelo de regresión ajustado a los datos de electricidad")
new.time <- seq(length(Elec.ts)+1, length = 36)
new.data <- data.frame(Time = new.time, Imth = rep(1:12, 3))
predict.lm <- predict(Elec.lm, new.data)
predict.arma <- predict(best.arma, n.ahead = 36)
elec.pred <- ts(exp(predict.lm + predict.arma$pred), start = 1991, freq = 12)
ts.plot(cbind(Elec.ts, elec.pred), lty = 1:2,
col = c("blue", "red"), xlab = "Tiempo",
ylab = "Producción de electricidad",
main = "Predicción de los datos de producción de electricidad",
sub = "Predicción de 36 meses")
x <- w <- rnorm(200)
for(t in 2:200) x[t] <- 0.5 * x[t-1] + w[t]
plot(x, type = "l", xlab = "", ylab = "")
title(main = "Proceso AR(1) simulado",
xlab = "Tiempo",
ylab = expression(x[t]),
sub = expression(x[t]==0.5*x[t-1]+w[t]))
acf(x, main = "")
title(main = "Correlograma del proceso AR(1) simulado",
sub = expression(x[t]==0.5*x[t-1]+w[t]))
pacf(x, main = "")
title(main = "Correlograma Parcial del proceso AR(1) simulado",
sub = expression(x[t]==0.5*x[t-1]+w[t]))
x.ar <- ar(x, method = "mle")
x.ar$order
x.ar$ar
Elec.ts <- ts(CBE[, 3], start = 1958, freq = 12)
plot(Elec.ts, xlab = "", ylab = "")
title(main = "Serie de Producción de Electricidad Australiana",
ylab = "Producción de electricidad (GWh)",
xlab = "Tiempo")
plot(diff(Elec.ts), xlab = "", ylab = "")
title(main = "Serie Diferenciada de Producción de Electricidad Australiana",
xlab = "Tiempo", ylab = "Dif Serie",
sub = "Gráfica de la serie diferenciada de primer órden")
plot(diff(log(Elec.ts)), xlab = "", ylab = "")
title(main = "Serie de log dif de Producción de Electricidad Australiana",
xlab = "Tiempo", ylab = "Dif log-Serie",
sub = "Gráfica de la serie log-transformada diferenciada de primer órden")
set.seed(1)
x <- w <- rnorm(1000)
for(i in 3:1000) x[i] <- 0.5*x[i-1] + x[i-1] - 0.5*x[i-2] + w[i] + 0.3*w[i-1]
plot(x, type = "l",
main = "Serie simulada de un modelo ARIMA(1, 1, 1)",
xlab = "Tiempo",
ylab = expression(x[t]),
sub = expression(x[t] == 0.5*x[t-1] + x[t-1] - 0.5*x[t-2] + w[t] + 0.3*w[t-1]))
arima(x, order = c(1, 1, 1))
x <- arima.sim(model = list(order = c(1, 1, 1), ar = 0.5, ma = 0.3), n = 1000)
arima(x, order = c(1, 1, 1))
CBE <- read.csv("cbe.csv", header = TRUE)
Beer.ts <- ts(CBE[, 2], start = 1958, freq = 12)
plot(Beer.ts, xlab = "", ylab = "")
title(main = "Serie de Producción de Cerveza en Australia",
ylab = "Producción de Cerveza (Megalitros)",
xlab = "Mes")
Beer.ima <- arima(Beer.ts, order = c(0, 1, 1))
Beer.ima
acf(resid(Beer.ima), main = "")
title(main = "Autocorrelaciones para los Residuales del Ajuste",
sub = expression(x[t]==x[t-1]+w[t]-0.33*w[t-1]))
Beer.1991 <- predict(Beer.ima, n.ahead = 12)
sum(Beer.1991$pred)
Elec.ts <- ts(CBE[, 3], start = 1958, freq = 12)
plot(Elec.ts, xlab = "", ylab = "")
title(main = "Serie de Producción de Electricidad Australiana",
ylab = "Producción de electricidad (GWh)",
xlab = "Tiempo")
plot(log(Elec.ts), xlab = "", ylab = "")
title(main = "Log de Serie de Producción de Electricidad Australiana",
ylab = "Log de Producción de electricidad (GWh)",
xlab = "Tiempo")
Elec.AR <- arima(log(Elec.ts), order = c(1, 1, 0),
seas = list(order = c(1, 0, 0), 12))
Elec.MA <- arima(log(Elec.ts), order = c(0, 1, 1),
seas = list(order = c(0, 0, 1), 12))
AIC(Elec.AR)
AIC(Elec.MA)
get.best.arima <- function(x.ts, maxord = c(1, 1, 1, 1, 1, 1)){
best.aic <- 1e8
n <- length(x.ts)
for(p in 0:maxord[1])for(d in 0:maxord[2])for(q in 0:maxord[3])
for(P in 0:maxord[4])for(D in 0:maxord[5])for(Q in 0:maxord[6])
{
fit <- arima(x.ts, order = c(p, d, q),
seas = list(order = c(P, D, Q),
frequency(x.ts)), method = "CSS")
fit.aic <- -2*fit$loglik + (log(n) + 1)*length(fit$coef)
if(fit.aic < best.aic){
best.aic <- fit.aic
best.fit <- fit
best.model <- c(p, d, q, P, D, Q)
}
}
list(best.aic, best.fit, best.model)
}
best.arima.elec <- get.best.arima(log(Elec.ts),
maxord = c(2, 2, 2, 2, 2, 2))
best.fit.elec <- best.arima.elec[[2]]  # Modelo
best.arima.elec[[3]] # Tipo de modelo (órdenes)
best.fit.elec
best.arima.elec[[1]] # AIC
acf(resid(best.fit.elec), main = "")
title(main = "Correlograma de los residuales del ajuste")
pr <- predict(best.fit.elec, 12)$pred
ts.plot(cbind(window(Elec.ts, start = 1981),
exp(pr)), col = c("blue", "red"), xlab = "")
title(main = "Predicción para la serie de producción de electricidad",
xlab = "Mes",
ylab = "Producción de electricidad (GWh)")
shiny::runApp('D:/bedu/Modulo-2-BEDU-Equipo-15/Session-08/ejemplo_01/ejemplo1')
runApp('D:/r/repoCursoMuestra/Programacion-con-R-Santander-master/Sesion-08/Ejemplo-01')
runApp('D:/r/repoCursoMuestra/Programacion-con-R-Santander-master/Sesion-08/Ejemplo-02')
runApp('D:/r/repoCursoMuestra/Programacion-con-R-Santander-master/Sesion-08/Ejemplo-02')
runApp('D:/r/repoCursoMuestra/Programacion-con-R-Santander-master/Sesion-08/Ejemplo-02')
runApp('D:/bedu/Modulo-2-BEDU-Equipo-15/Session-08/postwork_8')
runApp('D:/r/repoCursoMuestra/Programacion-con-R-Santander-master/Sesion-08/Ejemplo-03')
runApp('D:/r/repoCursoMuestra/Programacion-con-R-Santander-master/Sesion-08/Ejemplo-05')
runApp('D:/r/repoCursoMuestra/Programacion-con-R-Santander-master/Sesion-08/Ejemplo-05')
shiny::runApp('D:/bedu/Modulo-2-BEDU-Equipo-15/Session-08/postwork_8')
setwd("D:/bedu/Modulo-2-BEDU-Equipo-15/Session-08/postwork_8")
```R
library(fbRanks)
library(dplyr)
library(ggplot2)
install.packages('fbRanks')
library(fbRanks)
u1011 <- "https://www.football-data.co.uk/mmz4281/1011/SP1.csv"
u1112 <- "https://www.football-data.co.uk/mmz4281/1112/SP1.csv"
u1213 <- "https://www.football-data.co.uk/mmz4281/1213/SP1.csv"
u1314 <- "https://www.football-data.co.uk/mmz4281/1314/SP1.csv"
u1415 <- "https://www.football-data.co.uk/mmz4281/1415/SP1.csv"
u1516 <- "https://www.football-data.co.uk/mmz4281/1516/SP1.csv"
u1617 <- "https://www.football-data.co.uk/mmz4281/1617/SP1.csv"
u1718 <- "https://www.football-data.co.uk/mmz4281/1718/SP1.csv"
u1819 <- "https://www.football-data.co.uk/mmz4281/1819/SP1.csv"
u1920 <- "https://www.football-data.co.uk/mmz4281/1920/SP1.csv"
#RawData <- "C:\\\"
download.file(url = u1011, destfile ="SP1-1011.csv", mode = "wb")
download.file(url = u1112, destfile ="SP1-1112.csv", mode = "wb")
download.file(url = u1213, destfile ="SP1-1213.csv", mode = "wb")
download.file(url = u1314, destfile ="SP1-1314.csv", mode = "wb")
download.file(url = u1415, destfile ="SP1-1415.csv", mode = "wb")
download.file(url = u1516, destfile ="SP1-1516.csv", mode = "wb")
download.file(url = u1617, destfile ="SP1-1617.csv", mode = "wb")
download.file(url = u1718, destfile ="SP1-1718.csv", mode = "wb")
download.file(url = u1819, destfile ="SP1-1819.csv", mode = "wb")
download.file(url = u1920, destfile ="SP1-1920.csv", mode = "wb")
d1011 <- read.csv("SP1-1011.csv")
d1112 <- read.csv("SP1-1112.csv")
d1213 <- read.csv("SP1-1213.csv")
d1314 <- read.csv("SP1-1314.csv")
d1415 <- read.csv("SP1-1415.csv")
d1516 <- read.csv("SP1-1516.csv")
d1617 <- read.csv("SP1-1617.csv")
d1718 <- read.csv("SP1-1718.csv")
d1819 <- read.csv("SP1-1819.csv")
d1920 <- read.csv("SP1-1920.csv")
d1011S <- select(d1011, Date:FTAG, BbMx.2.5:BbAv.2.5.1)
d1112S <- select(d1112, Date:FTAG, BbMx.2.5:BbAv.2.5.1)
d1213S <- select(d1213, Date:FTAG, BbMx.2.5:BbAv.2.5.1)
d1314S <- select(d1314, Date:FTAG, BbMx.2.5:BbAv.2.5.1)
d1415S <- select(d1415, Date:FTAG, BbMx.2.5:BbAv.2.5.1)
d1516S <- select(d1516, Date:FTAG, BbMx.2.5:BbAv.2.5.1)
d1617S <- select(d1617, Date:FTAG, BbMx.2.5:BbAv.2.5.1)
d1718S <- select(d1718, Date:FTAG, BbMx.2.5:BbAv.2.5.1)
d1819S <- select(d1819, Date:FTAG, BbMx.2.5:BbAv.2.5.1)
d1920S <- select(d1920, Date:FTAG, Max.2.5:Avg.2.5.1)
d1920S <- select(d1920S, -Time)
# Arreglamos las fechas
d1011S <- mutate(d1011S, Date = as.Date(Date, format = "%d/%m/%y"))
d1112S <- mutate(d1112S, Date = as.Date(Date, format = "%d/%m/%y"))
d1213S <- mutate(d1213S, Date = as.Date(Date, format = "%d/%m/%y"))
d1314S <- mutate(d1314S, Date = as.Date(Date, format = "%d/%m/%y"))
d1415S <- mutate(d1415S, Date = as.Date(Date, format = "%d/%m/%y"))
d1516S <- mutate(d1516S, Date = as.Date(Date, format = "%d/%m/%y"))
d1617S <- mutate(d1617S, Date = as.Date(Date, format = "%d/%m/%y"))
d1718S <- mutate(d1718S, Date = as.Date(Date, format = "%d/%m/%y"))
d1819S <- mutate(d1819S, Date = as.Date(Date, format = "%d/%m/%Y"))
d1920S <- mutate(d1920S, Date = as.Date(Date, format = "%d/%m/%Y"))
d1019S <- rbind(d1011S, d1112S, d1213S, d1314S, d1415S, d1516S, d1617S, d1718S, d1819S)
d1019S <- rename(d1019S,  Max.2.5.O = BbMx.2.5,
Avg.2.5.O = BbAv.2.5,
Max.2.5.U = BbMx.2.5.1,
Avg.2.5.U = BbAv.2.5.1)
d1920S <- rename(d1920S,  Max.2.5.O = Max.2.5,
Avg.2.5.O = Avg.2.5,
Max.2.5.U = Max.2.5.1,
Avg.2.5.U = Avg.2.5.1)
d1019S <- select(d1019S, colnames(d1920S))
d1020S <- rbind(d1019S, d1920S)
d1020S <- rename(d1020S, date = Date, home.team = HomeTeam, home.score = FTHG, away.team = AwayTeam, away.score = FTAG)
data <- select(d1020S, date, home.team, home.score, away.team, away.score:Avg.2.5.U) # Este data frame contiene todos los datos necesarios
head(data, n = 2L); tail(data, n = 2L)
md <- data %>% select(date:away.score)
write.csv(md, "match.data.csv", row.names = FALSE)
df <- create.fbRanks.dataframes(scores.file = "match.data.csv")
teams <- df$teams; scores <- df$scores
head(teams, n = 2L); dim(teams); head(scores, n = 2L); dim(scores)
f <- scores$date # Fechas de partidos
fu <- unique(f) # Fechas sin repeticiÃ³n
Ym <- format(fu, "%Y-%m") # Meses y aÃ±os
Ym <- unique(Ym) # Meses y aÃ±os sin repetir
places <- which(Ym[15]==format(scores$date, "%Y-%m")) # Consideramos partidos de 15 meses para comenzar a ajustar el modelo
ffe <- scores$date[max(places)] # Fecha final conjunto de entrenamiento
train <- scores %>% filter(date <= ffe)
test <- scores %>% filter(date > ffe)
head(train, n = 1); tail(train, n = 1)
head(test, n = 1); tail(test, n = 1)
traindate <- unique(train$date)
testdate <- unique(test$date)
ranks <- rank.teams(scores = scores, teams = teams,
min.date = traindate[1],
max.date = traindate[length(traindate)])
pred <- predict(ranks, date = testdate[1])
phs <- pred$scores$pred.home.score # predicted home score
pas <- pred$scores$pred.away.score # predicted away score
pht <- pred$scores$home.team # home team in predictions
pat <- pred$scores$away.team # away team in predictions
phs <- NULL; pas <- NULL; pht <- NULL; pat <- NULL
for(i in 1:(length(unique(scores$date))-170)){
ranks <- rank.teams(scores = scores, teams = teams,
min.date = unique(scores$date)[i],
max.date = unique(scores$date)[i+170-1],
silent = TRUE,
time.weight.eta = 0.0005)
pred <- predict(ranks, date = unique(scores$date)[i+170],
silent = TRUE)
phs <- c(phs, pred$scores$pred.home.score) # predicted home score
pas <- c(pas, pred$scores$pred.away.score) # predicted away score
pht <- c(pht, pred$scores$home.team) # home team in predictions
pat <- c(pat, pred$scores$away.team) # away team in predictions
}
buenos <- !(is.na(phs) | is.na(pas)) #
phs <- phs[buenos] # predicted home score
pas <- pas[buenos] # predicted away score
pht <- pht[buenos] # home team in predictions
pat <- pat[buenos] # away team in predictions
momio <- data %>% filter(date >= unique(scores$date)[171]) # momios conjunto de prueba
momio <- momio[buenos,]
mean(pht == momio$home.team); mean(pat == momio$away.team)
mean(phs + pas > 2.5 & momio$home.score + momio$away.score > 2.5)
mean(phs + pas < 2.5 & momio$home.score + momio$away.score < 2.5)
hs <- momio$home.score
as <- momio$away.score
mean(phs + pas > 3) # proporciÃ³n de partidos con mÃ¡s de tres goles segÃºn el modelo
mean(phs + pas > 3 & hs + as > 2.5)/mean(phs + pas > 3)
# probabilidad condicional estimada de ganar en over 2.5
mean(phs + pas < 2.1) # proporciÃ³n de partidos con menos de 2.1 goles segÃºn el modelo
mean(phs + pas < 2.1 & hs + as < 2.5)/mean(phs + pas < 2.1)
cap <- 50000; g <- NULL
for(j in 1:length(phs)){
if(((phs[j] + pas[j]) > 3) & (0.64/(momio$Max.2.5.O[j]^-1) > 1)){
if((hs[j] + as[j]) > 2.5) cap <- cap + 1000*(momio$Max.2.5.O[j]-1)
else cap <- cap - 1000
g <- c(g, cap)
}
if(((phs[j] + pas[j]) < 2.1) & (0.58/(momio$Max.2.5.U[j]^-1) > 1)){
if((hs[j] + as[j]) < 2.5) cap <- cap + 1000*(momio$Max.2.5.U[j]-1)
else cap <- cap - 1000
g <- c(g, cap)
}
}
g <- data.frame(Num_Ap = 1:length(g), Capital = g)
p <- ggplot(g, aes(x=Num_Ap, y=Capital)) + geom_line( color="purple") + geom_point() +
labs(x = "NÃºmero de Apuesta",
y = "Capital",
title = "Realizando una secuencia de apuestas") +
theme(plot.title = element_text(size=12))  +
theme(axis.text.x = element_text(face = "bold", color="blue" , size = 10, angle = 25, hjust = 1),
axis.text.y = element_text(face = "bold", color="blue" , size = 10, angle = 25, hjust = 1))  # color, Ã¡ngulo y estilo de las abcisas y ordenadas
p
p
cap <- 50000; g <- NULL
for(j in 1:length(phs)){
if(((phs[j] + pas[j]) > 3) & (0.64/(momio$Avg.2.5.O[j]^-1) > 1)){
if((hs[j] + as[j]) > 2.5) cap <- cap + 1000*(momio$Avg.2.5.O[j]-1)
else cap <- cap - 1000
g <- c(g, cap)
}
if(((phs[j] + pas[j]) < 2.1) & (0.58/(momio$Avg.2.5.U[j]^-1) > 1)){
if((hs[j] + as[j]) < 2.5) cap <- cap + 1000*(momio$Avg.2.5.U[j]-1)
else cap <- cap - 1000
g <- c(g, cap)
}
}
g <- data.frame(Num_Ap = 1:length(g), Capital = g)
p <- ggplot(g, aes(x=Num_Ap, y=Capital)) + geom_line( color="purple") + geom_point() +
labs(x = "NÃºmero de Apuesta",
y = "Capital",
title = "Realizando una secuencia de apuestas") +
theme(plot.title = element_text(size=12))  +
theme(axis.text.x = element_text(face = "bold", color="blue" , size = 10, angle = 25, hjust = 1),
axis.text.y = element_text(face = "bold", color="blue" , size = 10, angle = 25, hjust = 1))  # color, Ã¡ngulo y estilo de las abcisas y ordenadas
p
